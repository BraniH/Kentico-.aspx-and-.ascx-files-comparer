import os
import requests
import re
import filecmp

path1 = 'C:\\inetpub\\wwwroot\\Kentico11\\CMS\\'
path2 = 'C:\\inetpub\\wwwroot\\Banter\\CMS\\'  # Path to the test project

files1 = []
files2 = []
new_paths = []
extracted_paths = []
all_correct_paths = []


def find_paths(path):
    files = []
    for r, d, f in os.walk(path):
        for file in f:
            if (('.aspx' in file) or ('.ascx' in file)):
                files.append(os.path.join(r, file))
    return files


def turn_slashes(array_with_slash):
    complete_files = []
    for a in array_with_slash:
        b = str(a.replace("\\", "/"))
        right_path = b.split("CMS", 1)[1]
        complete_files.append(right_path)
    return complete_files


def turn_slashes_back(string_what_needs_to_turned):
    string_what_needs_to_turned = string_what_needs_to_turned.replace("\/", "\\")
    string_what_needs_to_turned = string_what_needs_to_turned.replace("/", "\\")
    return string_what_needs_to_turned

#if files are different - output is false
def recognize_different_files(file1, file2):
    return filecmp.cmp(file1, file2)

#print(recognize_different_files("C:\\Users\\BranislavH\\Desktop\\ahoj.txt", "C:\\Users\\BranislavH\\Desktop\\cav.txt"))

print("[+] Program started!")

files1 = find_paths(path1)
files2 = find_paths(path2)

complete_kentico_files = turn_slashes(files1)
complete_test_files = turn_slashes(files2)


print("\n[+] Finding new and changed files!")
for path in complete_test_files:
    if path not in complete_kentico_files:
        extracted_paths.append(path)
    else:
        reconstruct_path1 = path1 + path
        reconstruct_path2 = path2 + path
        reconstruct_path1 = turn_slashes_back(reconstruct_path1)
        reconstruct_path2 = turn_slashes_back(reconstruct_path2)
        file_difference = recognize_different_files(reconstruct_path1, reconstruct_path2)
        if file_difference == False:
             extracted_paths.append(path)


for extracted_path in extracted_paths:
    adapted_path = str(path2 + extracted_path)
    adapted_path = adapted_path.replace("/", "\\")
    full_path = adapted_path.replace("\\\\", "\\")
    all_correct_paths.append(full_path)


potentionaly_vulnerable_strings=["GetString", "Eval", "ScriptHelper.GetScript", "HttpContext.Current.Request", "lbl", "Lbl"]
for correct_path in all_correct_paths:
    with open(correct_path, "rb") as potencial_vulns:
        transformed_file = str(potencial_vulns.read())
        for vuln_string in potentionaly_vulnerable_strings:
            if vuln_string in transformed_file and correct_path not in new_paths:
                new_paths.append(correct_path)

print("\n[+] Adding all findings in to the file!")

with open("AllCustomFiles.txt", 'w') as Allcustom:
    for suitable_path in new_paths:
        #changed_right_path = suitable_path.split("CMS", 1)[1]
        changed_right_path = suitable_path
        print(changed_right_path, file=Allcustom)
    print("\n[+] Finished! " + str(len(new_paths)) + " new paths were added into 'AllCustomFiles.txt' .")
